{"version":3,"mappings":"4aAAA,GAASA,EAAkBC,GAAMC,CAAe,CAC5C,MAAMC,QAAiB,IACvB,QAAWC,UACE,GAAIA,KAEjB,IAAMC,EAAU,GACVC,IAAa,MAEnB,CAAOA,EAAM,UAAY,CACvB,MAAMC,MAAa,MACbC,IAAW,CACjB,UAAWC,KAAO,QAAQ,QAAQF,CAAI,EAChCJ,EAAW,IAAIM,CAAG,KACpBD,CAAS,SAAQD,CAAKE,CAAG,CAAC,EAC1B,OAAOF,EAAKE,CAAG,KAGb,QAAQ,GAAGD,CAAQ,KACjB,KAAS,CAClB,OACD,CAAOH,OAGT,IAASK,EAAoBC,GAAOT,CAAe,CACjD,UAAa,OAASD,GAASD,MAAsC,CACtE,CAEc,cAA2BE,CAAgB,CAAC,WAAU,CAAG,CACtE,QAAI,WAAM,EAAQD,CAAI,EACbS,EAAoBT,OAEJA,EAAMC,CAAa,OC5BpC,CAACU,GAAuBC,GAAO,CAC3C,IAAIC,QACJ,IAAAD,EAAG,WAAa,CAAME,EAAE,OAAS,MAAMA,QAAO,CAAIA,EAAE,MAAQ,GACrDD,CACP,GAAGT,EAAQW,GAAS,66ICLuF,MAAK,QAAC,MAAO,wCAAK,kCACjH,MAACC,MAA8B,CAC3C,KAAIH,CAAK,OACT,MAAG,OAAQC,KAAWA,CAAE,QAAS,OAAQ,MAAK,CAAIA,EAAE,MAAQ,KAE5D,MAAW","names":["flattenObjectTree","tree","childKeyNames","keyNameSet","keyName","flatten","stack","node","children","key","flattenArrayOfTrees","trees","Diffsmap_flattened","ro","re","v","diffsmap","Typesmap_flattened"],"sources":["../../src/shared/lib/@mskashef/flatten-tree.js","../../src/views/zujuanink-v3/questionBlock/Diffsmap_flattened.js","../../src/views/zujuanink-v3/questionBlock/Typesmap_flattened.js"],"sourcesContent":["function flattenObjectTree(tree, childKeyNames) {\r\n    const keyNameSet = new Set();\r\n    for (const keyName of childKeyNames) {\r\n      keyNameSet.add(keyName)\r\n    }\r\n    const flatten = [];\r\n    const stack = [tree];\r\n  \r\n    while (stack.length > 0) {\r\n      const node = stack.shift();\r\n      const children = [];\r\n      for (const key of Reflect.ownKeys(node)) {\r\n        if (keyNameSet.has(key)) {\r\n          children.push(...node[key]);\r\n          delete node[key];\r\n        }\r\n      }\r\n      stack.unshift(...children);\r\n      flatten.push(node);\r\n    }\r\n    return flatten;\r\n  }\r\n  \r\n  function flattenArrayOfTrees(trees, childKeyNames) {\r\n    return trees.flatMap((tree) => flattenObjectTree(tree, childKeyNames));\r\n  }\r\n  \r\n  export default function flattenTree(tree, childKeyNames = [\"children\"]) {\r\n    if (Array.isArray(tree)) {\r\n      return flattenArrayOfTrees(tree, childKeyNames);\r\n    }\r\n    return flattenObjectTree(tree, childKeyNames);\r\n  }","import diffsmap from \"../basicinfo/diffs.json\";\r\nimport flatten from \"../../../shared/lib/@mskashef/flatten-tree\";\r\n\r\nexport const Diffsmap_flattened = ((ro) => {\r\nlet re = {};\r\nro.forEach(v => { if (v.value != 0) re[v.value] = v.label; });\r\nreturn re;\r\n})(flatten(diffsmap));\r\n","import typesmap from \"../basicinfo/ft-type.json\";\r\n\r\nconst { defineProps, defineSlots, defineEmits, defineExpose, defineModel, defineOptions, withDefaults, } = await import('vue');\r\nexport const Typesmap_flattened = ((ro) => {\r\nlet re = {};\r\nro.forEach(v => { if (v.value != 0) re[v.value] = v.label; });\r\nreturn re;\r\n})(typesmap);\r\n"],"file":"assets/ild-c6ed2581.js"}