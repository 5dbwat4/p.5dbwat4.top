{"version":3,"file":"use-memo-b9add725.js","sources":["../../node_modules/naive-ui/es/_utils/vue/resolve-slot.js","../../node_modules/vooks/es/use-memo.js"],"sourcesContent":["import { Fragment, isVNode, Comment } from 'vue';\nfunction ensureValidVNode(vnodes) {\n    return vnodes.some((child) => {\n        if (!isVNode(child)) {\n            return true;\n        }\n        if (child.type === Comment) {\n            return false;\n        }\n        if (child.type === Fragment &&\n            !ensureValidVNode(child.children)) {\n            return false;\n        }\n        return true;\n    })\n        ? vnodes\n        : null;\n}\n/**\n * We shouldn't use the following functions with slot flags `_: 1, 2, 3`\n */\nexport function resolveSlot(slot, fallback) {\n    return (slot && ensureValidVNode(slot())) || fallback();\n}\nexport function resolveSlotWithProps(slot, props, fallback) {\n    return (slot && ensureValidVNode(slot(props))) || fallback(props);\n}\n/**\n * Resolve slot with wrapper if content exists, no fallback\n */\nexport function resolveWrappedSlot(slot, wrapper) {\n    const children = slot && ensureValidVNode(slot());\n    return wrapper(children || null);\n}\n/*\n * Resolve slot with wrapper if content exists, no fallback\n */\nexport function resolveWrappedSlotWithProps(slot, props, wrapper) {\n    const children = slot && ensureValidVNode(slot(props));\n    return wrapper(children || null);\n}\nexport function isSlotEmpty(slot) {\n    return !(slot && ensureValidVNode(slot()));\n}\n","import { computed, ref, watch } from 'vue';\nfunction useMemo(getterOrOptions) {\n    const computedValueRef = computed(getterOrOptions);\n    // Maybe it's not possible to lazy evaluate the value, since we can't make\n    // render phase capture the deps behind useMemo\n    const valueRef = ref(computedValueRef.value);\n    watch(computedValueRef, (value) => {\n        valueRef.value = value;\n    });\n    if (typeof getterOrOptions === 'function') {\n        return valueRef;\n    }\n    else {\n        return {\n            __v_isRef: true,\n            get value() {\n                return valueRef.value;\n            },\n            set value(v) {\n                getterOrOptions.set(v);\n            }\n        };\n    }\n}\nexport default useMemo;\n"],"names":["ensureValidVNode","vnodes","child","isVNode","Comment","Fragment","resolveSlot","slot","fallback","resolveSlotWithProps","props","resolveWrappedSlot","wrapper","children","resolveWrappedSlotWithProps","isSlotEmpty","useMemo","getterOrOptions","computedValueRef","computed","valueRef","ref","watch","value","v"],"mappings":"gGACA,SAASA,EAAiBC,EAAQ,CAC9B,OAAOA,EAAO,KAAMC,GACXC,EAAQD,CAAK,EAGd,EAAAA,EAAM,OAASE,GAGfF,EAAM,OAASG,GACf,CAACL,EAAiBE,EAAM,QAAQ,GANzB,EAUd,EACKD,EACA,IACV,CAIO,SAASK,EAAYC,EAAMC,EAAU,CACxC,OAAQD,GAAQP,EAAiBO,EAAI,CAAE,GAAMC,EAAQ,CACzD,CACO,SAASC,EAAqBF,EAAMG,EAAOF,EAAU,CACxD,OAAQD,GAAQP,EAAiBO,EAAKG,CAAK,CAAC,GAAMF,EAASE,CAAK,CACpE,CAIO,SAASC,EAAmBJ,EAAMK,EAAS,CAC9C,MAAMC,EAAWN,GAAQP,EAAiBO,EAAM,CAAA,EAChD,OAAOK,EAAQC,GAAY,IAAI,CACnC,CAIO,SAASC,EAA4BP,EAAMG,EAAOE,EAAS,CAC9D,MAAMC,EAAWN,GAAQP,EAAiBO,EAAKG,CAAK,CAAC,EACrD,OAAOE,EAAQC,GAAY,IAAI,CACnC,CACO,SAASE,EAAYR,EAAM,CAC9B,MAAO,EAAEA,GAAQP,EAAiBO,EAAI,CAAE,EAC5C,CC1CA,SAASS,EAAQC,EAAiB,CAC9B,MAAMC,EAAmBC,EAASF,CAAe,EAG3CG,EAAWC,EAAIH,EAAiB,KAAK,EAI3C,OAHAI,EAAMJ,EAAmBK,GAAU,CAC/BH,EAAS,MAAQG,CACzB,CAAK,EACG,OAAON,GAAoB,WACpBG,EAGA,CACH,UAAW,GACX,IAAI,OAAQ,CACR,OAAOA,EAAS,KACnB,EACD,IAAI,MAAMI,EAAG,CACTP,EAAgB,IAAIO,CAAC,CACxB,CACb,CAEA","x_google_ignoreList":[0,1]}