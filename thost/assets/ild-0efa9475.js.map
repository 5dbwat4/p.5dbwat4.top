{"version":3,"mappings":"odAAA,SAASA,EAAkBC,EAAMC,EAAe,CAC5C,MAAMC,EAAa,IAAI,IACvB,UAAWC,KAAWF,EACpBC,EAAW,IAAIC,CAAO,EAExB,MAAMC,EAAU,GACVC,EAAQ,CAACL,CAAI,EAEnB,KAAOK,EAAM,OAAS,GAAG,CACvB,MAAMC,EAAOD,EAAM,QACbE,EAAW,GACjB,UAAWC,KAAO,QAAQ,QAAQF,CAAI,EAChCJ,EAAW,IAAIM,CAAG,IACpBD,EAAS,KAAK,GAAGD,EAAKE,CAAG,CAAC,EAC1B,OAAOF,EAAKE,CAAG,GAGnBH,EAAM,QAAQ,GAAGE,CAAQ,EACzBH,EAAQ,KAAKE,CAAI,CAClB,CACD,OAAOF,CACR,CAED,SAASK,EAAoBC,EAAOT,EAAe,CACjD,OAAOS,EAAM,QAASV,GAASD,EAAkBC,EAAMC,CAAa,CAAC,CACtE,CAEc,SAASU,EAAYX,EAAMC,EAAgB,CAAC,UAAU,EAAG,CACtE,OAAI,MAAM,QAAQD,CAAI,EACbS,EAAoBT,EAAMC,CAAa,EAEzCF,EAAkBC,EAAMC,CAAa,CAChD,CC7BY,MAACW,GAAuBC,GAAO,CAC3C,IAAIC,EAAK,GACT,OAAAD,EAAG,QAAQE,GAAK,CAAMA,EAAE,OAAS,IAAGD,EAAGC,EAAE,KAAK,EAAIA,EAAE,MAAQ,GACrDD,CACP,GAAGV,EAAQY,CAAQ,CAAC,46ICLuF,MAAMC,EAAA,WAAO,uCAAK,sCACjH,MAACC,GAAuBL,GAAO,CAC3C,IAAIC,EAAK,GACT,OAAAD,EAAG,QAAQE,GAAK,CAAMA,EAAE,OAAS,IAAGD,EAAGC,EAAE,KAAK,EAAIA,EAAE,MAAQ,GACrDD,CACP,GAAGK,CAAQ","names":["flattenObjectTree","tree","childKeyNames","keyNameSet","keyName","flatten","stack","node","children","key","flattenArrayOfTrees","trees","flattenTree","Diffsmap_flattened","ro","re","v","diffsmap","__vitePreload","Typesmap_flattened","typesmap"],"sources":["../../src/shared/lib/@mskashef/flatten-tree.js","../../src/views/zujuanink-v3/questionBlock/Diffsmap_flattened.js","../../src/views/zujuanink-v3/questionBlock/Typesmap_flattened.js"],"sourcesContent":["function flattenObjectTree(tree, childKeyNames) {\r\n    const keyNameSet = new Set();\r\n    for (const keyName of childKeyNames) {\r\n      keyNameSet.add(keyName)\r\n    }\r\n    const flatten = [];\r\n    const stack = [tree];\r\n  \r\n    while (stack.length > 0) {\r\n      const node = stack.shift();\r\n      const children = [];\r\n      for (const key of Reflect.ownKeys(node)) {\r\n        if (keyNameSet.has(key)) {\r\n          children.push(...node[key]);\r\n          delete node[key];\r\n        }\r\n      }\r\n      stack.unshift(...children);\r\n      flatten.push(node);\r\n    }\r\n    return flatten;\r\n  }\r\n  \r\n  function flattenArrayOfTrees(trees, childKeyNames) {\r\n    return trees.flatMap((tree) => flattenObjectTree(tree, childKeyNames));\r\n  }\r\n  \r\n  export default function flattenTree(tree, childKeyNames = [\"children\"]) {\r\n    if (Array.isArray(tree)) {\r\n      return flattenArrayOfTrees(tree, childKeyNames);\r\n    }\r\n    return flattenObjectTree(tree, childKeyNames);\r\n  }","import diffsmap from \"../basicinfo/diffs.json\";\r\nimport flatten from \"../../../shared/lib/@mskashef/flatten-tree\";\r\n\r\nexport const Diffsmap_flattened = ((ro) => {\r\nlet re = {};\r\nro.forEach(v => { if (v.value != 0) re[v.value] = v.label; });\r\nreturn re;\r\n})(flatten(diffsmap));\r\n","import typesmap from \"../basicinfo/ft-type.json\";\r\n\r\nconst { defineProps, defineSlots, defineEmits, defineExpose, defineModel, defineOptions, withDefaults, } = await import('vue');\r\nexport const Typesmap_flattened = ((ro) => {\r\nlet re = {};\r\nro.forEach(v => { if (v.value != 0) re[v.value] = v.label; });\r\nreturn re;\r\n})(typesmap);\r\n"],"file":"assets/ild-0efa9475.js"}