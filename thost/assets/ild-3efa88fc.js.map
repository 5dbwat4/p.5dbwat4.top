{"version":3,"file":"ild-3efa88fc.js","sources":["../../src/views/zujuanink-v3/utils/nomorlize_q-tailored.js","../../src/shared/lib/@mskashef/flatten-tree.js","../../src/views/zujuanink-v3/questionBlock/ild.vue"],"sourcesContent":["function normalizeq(q,Nopt){\r\n    const ool=document.createElement(\"div\")\r\n    q=q.replaceAll(\"【题文】\",\"\")\r\n    ool.innerHTML=q\r\n\r\n    ool.querySelectorAll(\"img\").forEach(v=>{\r\n        if(v.src.includes(\"/formula/\")){\r\n            v.src=v.src.replace(\".png\",\".svg\")\r\n            // v.style.width=(v.width*.8)+\"px\"\r\n        }\r\n        if(v.src.includes(\"/dksih/\")){\r\n            let tmp=/\\?resizew=(\\d*)/.exec(v.src)\r\n            if(tmp&&tmp.length!=0){\r\n                v.style.width=tmp[1]+\"px\"\r\n                v.src=v.src.replace(/\\?resizew=(\\d*)/,\"\")\r\n                v.setAttribute(\"width\",tmp[1])\r\n                v.setAttribute(\"height\",\"\")\r\n            }\r\n        }\r\n    })\r\n\r\n    // ool.querySelectorAll(\"bk\").forEach(v=>{\r\n    //     v.outerHTML=v.outerHTML.replaceAll(\"bk\",\"input\")\r\n    // })\r\n\r\n    if(Nopt.source){\r\n        ool.innerHTML=`<span style=\"font-family:kaiti\">(${Nopt.source})</span>`+ool.innerHTML\r\n    }\r\n\r\n\r\n    // ool.querySelectorAll(\"p\").forEach(v=>{\r\n    //     if(!v.style.fontFamily){\r\n    //         v.style.fontFamily=\"Cambria , 宋体\"\r\n    //     }\r\n    //     if(!v.style.fontSize){\r\n    //         v.style.fontSize=\"9.5pt\"\r\n    //     }\r\n\r\n    //     // v.style.lineHeight=\"12pt\"\r\n    //     v.style.margin=\"0px\"\r\n    // })\r\n\r\n\r\n    // ool.querySelectorAll(\"table[name=optionsTable]\").forEach(v=>{\r\n    //     if(v.querySelectorAll(\"td\").length==4){\r\n    //         // console.log(\"oo\",v);\r\n    //         let opts=[],lns=1\r\n    //         v.querySelectorAll(\"td\").forEach(oo=>{\r\n    //             opts.push(oo.outerHTML)\r\n    //         })\r\n    //         v.addEventListener(\"click\",()=>{\r\n    //             console.log(\"click\");\r\n    //             const {ctn,next_lns}=toTable(opts,lns)\r\n    //             v.innerHTML=ctn\r\n    //             lns=next_lns\r\n    //         })\r\n    //     }\r\n\r\n    // })\r\n\r\n    // ool.querySelectorAll(\"table[name=optionsTable] td\").forEach(v=>{\r\n    //     if(!v.style.fontFamily){\r\n    //         v.style.fontFamily=\"Cambria , 宋体\"\r\n    //     }\r\n    //     if(!v.style.fontSize){\r\n    //         v.style.fontSize=\"9.5pt\"\r\n    //     }\r\n\r\n    //     // v.style.lineHeight=\"12pt\"\r\n    //     v.style.margin=\"0px\"\r\n    // })\r\n\r\n\r\n    //18.76/4\r\n\r\n    // ool.style.fontFamily=\"Cambria , 宋体\"\r\n\r\n\r\n    // if(Nopt.ret2){\r\n    //     ool.querySelectorAll(\"span\").forEach(v=>{\r\n    //         v.innerHTML=v.innerHTML.replace(/【小题(\\d*)】/,\"$1.\")\r\n    //     })\r\n    //     ool.querySelectorAll(\"bk\").forEach(v=>{\r\n    //         v.innerHTML=\"<u>&nbsp;&nbsp;&nbsp;\"+v.attributes.index.nodeValue+\"&nbsp;&nbsp;&nbsp;</u>\"\r\n            \r\n    //     })\r\n    // }\r\n\r\n    // console.log(ool.innerHTML);\r\n\r\n\r\n    return ool.innerHTML\r\n}\r\n\r\n\r\nfunction toTable(opts,lns){\r\n    if(lns==1){\r\n        return {ctn:\"<tbody><tr>\"+opts.join(\"\")+\"</tr></tbody>\",next_lns:2}\r\n    }\r\n    if(lns==2){\r\n        return {ctn:`<tbody><tr>${opts[0]}${opts[1]}</tr><tr>${opts[2]}${opts[3]}</tr></tbody>`,next_lns:4}\r\n    }\r\n    if(lns==4){\r\n        return {ctn:\"<tbody><tr>\"+opts.join(\"</tr><tr>\")+\"</tr></tbody>\",next_lns:1}\r\n    }\r\n}\r\n\r\nexport{normalizeq}\r\n","function flattenObjectTree(tree, childKeyNames) {\r\n    const keyNameSet = new Set();\r\n    for (const keyName of childKeyNames) {\r\n      keyNameSet.add(keyName)\r\n    }\r\n    const flatten = [];\r\n    const stack = [tree];\r\n  \r\n    while (stack.length > 0) {\r\n      const node = stack.shift();\r\n      const children = [];\r\n      for (const key of Reflect.ownKeys(node)) {\r\n        if (keyNameSet.has(key)) {\r\n          children.push(...node[key]);\r\n          delete node[key];\r\n        }\r\n      }\r\n      stack.unshift(...children);\r\n      flatten.push(node);\r\n    }\r\n    return flatten;\r\n  }\r\n  \r\n  function flattenArrayOfTrees(trees, childKeyNames) {\r\n    return trees.flatMap((tree) => flattenObjectTree(tree, childKeyNames));\r\n  }\r\n  \r\n  export default function flattenTree(tree, childKeyNames = [\"children\"]) {\r\n    if (Array.isArray(tree)) {\r\n      return flattenArrayOfTrees(tree, childKeyNames);\r\n    }\r\n    return flattenObjectTree(tree, childKeyNames);\r\n  }","<template>\r\n    <n-space>\r\n          <p class=\"header-info\">\r\n            {{ Diffsmap_flattened [$attrs.qcontent.diffv] }}\r\n          </p>\r\n          <n-divider vertical />\r\n          <p class=\"header-info\">{{ Typesmap_flattened [$attrs.qcontent.typeid] }}</p>\r\n          <n-divider vertical />\r\n          <p class=\"header-info\">ID:<n-text code>{{ $attrs.qcontent.id }}</n-text></p>\r\n          <n-divider vertical />\r\n          <p class=\"header-info\">\r\n            Knowledge:\r\n            <n-ellipsis style=\"max-width: 240px\">{{\r\n              $attrs.qcontent.knowledgeInfo\r\n            }}</n-ellipsis>\r\n          </p>\r\n        </n-space>\r\n        <div\r\n          v-html=\"normalizeq($attrs.qcontent.body, { source: $attrs.qcontent.title })\"\r\n        ></div>\r\n    </template>\r\n    \r\n    \r\n    <script setup>\r\n    import{NSpace,NDivider,NEllipsis,NText}from \"naive-ui\"\r\n    \r\n    import {normalizeq} from \"../utils/nomorlize_q-tailored\"\r\n    \r\n    \r\n    import typesmap from \"../basicinfo/ft-type.json\"\r\n    import diffsmap from \"../basicinfo/diffs.json\"\r\n    \r\n    import flatten from \"../../../shared/lib/@mskashef/flatten-tree\"\r\n    \r\n    \r\n    const Typesmap_flattened=((ro)=>{\r\n      let re={}\r\n      ro.forEach(v=>{if(v.value!=0)re[v.value]=v.label})\r\n      return re\r\n    })(typesmap);\r\n    \r\n    const Diffsmap_flattened=((ro)=>{\r\n      let re={}\r\n      ro.forEach(v=>{if(v.value!=0)re[v.value]=v.label})\r\n      return re\r\n    })(flatten(diffsmap));\r\n    \r\n    \r\n    \r\n    console.log(Typesmap_flattened);\r\n    </script>\r\n\r\n\r\n<style scoped>\r\n\r\n.paperSource {\r\n  font-size: 0.75rem;\r\n  margin: 0 0;\r\n}\r\n.paperSourceId {\r\n  background-color: aliceblue;\r\n  font-size: 0.65rem;\r\n}\r\n</style>"],"names":["normalizeq","q","Nopt","ool","v","tmp","flattenObjectTree","tree","childKeyNames","keyNameSet","keyName","flatten","stack","node","children","key","flattenArrayOfTrees","trees","flattenTree","Typesmap_flattened","ro","re","typesmap","Diffsmap_flattened","diffsmap"],"mappings":"gXAAA,SAASA,EAAWC,EAAEC,EAAK,CACvB,MAAMC,EAAI,SAAS,cAAc,KAAK,EACtC,OAAAF,EAAEA,EAAE,WAAW,OAAO,EAAE,EACxBE,EAAI,UAAUF,EAEdE,EAAI,iBAAiB,KAAK,EAAE,QAAQC,GAAG,CAKnC,GAJGA,EAAE,IAAI,SAAS,WAAW,IACzBA,EAAE,IAAIA,EAAE,IAAI,QAAQ,OAAO,MAAM,GAGlCA,EAAE,IAAI,SAAS,SAAS,EAAE,CACzB,IAAIC,EAAI,kBAAkB,KAAKD,EAAE,GAAG,EACjCC,GAAKA,EAAI,QAAQ,IAChBD,EAAE,MAAM,MAAMC,EAAI,CAAC,EAAE,KACrBD,EAAE,IAAIA,EAAE,IAAI,QAAQ,kBAAkB,EAAE,EACxCA,EAAE,aAAa,QAAQC,EAAI,CAAC,CAAC,EAC7BD,EAAE,aAAa,SAAS,EAAE,EAEjC,CACT,CAAK,EAMEF,EAAK,SACJC,EAAI,UAAU,oCAAoCD,EAAK,MAAM,WAAWC,EAAI,WAiEzEA,EAAI,SACf,i7IC5FA,SAASG,EAAkBC,EAAMC,EAAe,CAC5C,MAAMC,EAAa,IAAI,IACvB,UAAWC,KAAWF,EACpBC,EAAW,IAAIC,CAAO,EAExB,MAAMC,EAAU,CAAA,EACVC,EAAQ,CAACL,CAAI,EAEnB,KAAOK,EAAM,OAAS,GAAG,CACvB,MAAMC,EAAOD,EAAM,QACbE,EAAW,CAAA,EACjB,UAAWC,KAAO,QAAQ,QAAQF,CAAI,EAChCJ,EAAW,IAAIM,CAAG,IACpBD,EAAS,KAAK,GAAGD,EAAKE,CAAG,CAAC,EAC1B,OAAOF,EAAKE,CAAG,GAGnBH,EAAM,QAAQ,GAAGE,CAAQ,EACzBH,EAAQ,KAAKE,CAAI,CAClB,CACD,OAAOF,CACR,CAED,SAASK,EAAoBC,EAAOT,EAAe,CACjD,OAAOS,EAAM,QAASV,GAASD,EAAkBC,EAAMC,CAAa,CAAC,CACtE,CAEc,SAASU,EAAYX,EAAMC,EAAgB,CAAC,UAAU,EAAG,CACtE,OAAI,MAAM,QAAQD,CAAI,EACbS,EAAoBT,EAAMC,CAAa,EAEzCF,EAAkBC,EAAMC,CAAa,CAChD,gJCGI,MAAMW,GAAqBC,GAAK,CAC9B,IAAIC,EAAG,CAAE,EACT,OAAAD,EAAG,QAAQhB,GAAG,CAAIA,EAAE,OAAO,IAAEiB,EAAGjB,EAAE,KAAK,EAAEA,EAAE,MAAK,CAAC,EAC1CiB,CACR,GAAEC,CAAQ,EAELC,GAAqBH,GAAK,CAC9B,IAAIC,EAAG,CAAE,EACT,OAAAD,EAAG,QAAQhB,GAAG,CAAIA,EAAE,OAAO,IAAEiB,EAAGjB,EAAE,KAAK,EAAEA,EAAE,MAAK,CAAC,EAC1CiB,CACb,GAAOV,EAAQa,CAAQ,CAAC,EAIpB,eAAQ,IAAIL,CAAkB"}