{"version":3,"file":"export.a-0798a782.js","sources":["../../src/views/grouping/export.a.vue"],"sourcesContent":["<template>\r\n         <n-checkbox class=\"noprint\" v-model:checked=\"displayADirectly\" @update:checked=\"handledisplayADirectlyCheckedChange\">\r\n          直接从组卷网获取答案解析数据而非从oss缓存\r\n        </n-checkbox>\r\n\r\n    <div :style=\"{width:'18.76cm','line-height':'normal'}\" id=\"oonom\">\r\n        <div class=\"noprint\">\r\n            <!-- <div class=\"labi-container\">\r\n                <div class=\"labi-block\" v-for=\"rr in [1,2,3,4,5,6,7]\" :key=\"rr\" \r\n        :style=\"{height:1045+'px'}\">Page # {{rr}}</div>\r\n        </div> -->\r\n        </div>      <n-image-group> \r\n        <div id=\"corehtml\" :style=\"{width:'18.76cm',columns:2,'line-height':'normal'}\">\r\n        <p style=\"font-size:9.5pt;font-family:Cambria , fangsong;margin:0px\">Generated by thost | Group UUID: {{$route.params.id}} | Title: {{grouptitle}}</p>\r\n    <div v-for=\"oo in chunk2array(Tlist)\" :key=\"oo.id\">\r\n        <p style=\"font-size:9.5pt;margin:0px;font-family:Cambria , 仿宋;\">UUID:<span style=\"font-family:'courier new'\">{{oo.id}}</span> | qid:<span style=\"font-family:'courier new'\">{{oo.qid}}</span> </p>\r\n      <div v-if=\"displayADirectly\">\r\n    \r\n             <n-image  lazy :src=\"(XKWGetFile[oo.id]||{a:''}).a\" v-if=\"!OCRResAccepted[oo.id]\"><template #placeholder><n-spin/></template></n-image>\r\n             <n-button @click=\"OCRSingle(oo,8)\" class=\"noprint\">OCR chars</n-button>   <n-button @click=\"OCRSingle(oo,3)\" class=\"noprint\">OCR block</n-button>  \r\n             <p v-if=\"orcres[oo.id]\" style=\"margin:0 0;\">{{ orcres[oo.id] }}</p>   \r\n             <n-button @click=\"OCRResAccepted[oo.id]=true\"  class=\"noprint\">Accept OCR Result</n-button>\r\n             <div>\r\n        </div></div>\r\n      </div>\r\n    </div>          </n-image-group></div>\r\n    \r\n    </template>\r\n    \r\n    <script setup>\r\n    \r\n    import { onMounted, ref } from \"vue\"\r\n    import {useRoute,useRouter} from \"vue-router\"\r\n    const route=useRoute(),router=useRouter()\r\n    \r\n    import {NButton,NCheckbox,NP,NSpin,NImage,NImageGroup} from \"naive-ui\"\r\n    \r\n    import {normalizeq} from \"../../shared/nomorlize_q\"\r\n    import {qtypes} from \"../../shared/define_basic_qtypes\"\r\n    import { API } from \"../../shared/APIHelper\"\r\n    import swal from \"sweetalert\"\r\n    const shown=ref({\r\n        q:true,\r\n        a:false,\r\n        p:false\r\n    })\r\n    \r\n    const Noptions_ret2=ref(false)\r\n    const grouptitle=ref(\"\")\r\n    \r\n    const Tlist=ref({})\r\n    let groupentry=[]\r\n    API.post(\"/api/group/get\",{id:route.params.id}).then(sss=>{\r\n    \r\n    sss.entry.split(\",\").forEach(v => {\r\n        Tlist.value[v]=qtypes\r\n    });\r\n    \r\n    groupentry=sss.entry.split(\",\")\r\n    \r\n    \r\n    \r\n    grouptitle.value=sss.title\r\n    \r\n    Promise.all(sss.entry.split(\",\").map(v=>new Promise((res,rej)=>{\r\n    API.get(\"/api/qapi/get/\"+v).then(i=>{\r\n        Tlist.value[v]=i\r\n    })\r\n    GetDoneInfo(v)\r\n    }))).then(()=>{\r\n    \r\n    })\r\n    // fetch(\"/api/get\",{\"method\":\"POST\",\"body\":JSON.stringify({id:v}),\"headers\":{\"Content-Type\":\"application/json\"}}).then(o=>o.json()).then(i=>{\r\n    //     Tlist.value[v]=i\r\n    // })\r\n    // }))).then(()=>{\r\n    \r\n    // })\r\n    \r\n    \r\n    \r\n    })\r\n    \r\n    \r\n    \r\n    \r\n    //adddddd\r\n    \r\n    \r\n    const _JSONparse=(v)=>{return JSON.parse(v)}\r\n    \r\n    const doneinfo=ref({})\r\n    \r\n    ,chunk2array=mm=>Object.entries(mm).map(o=>o[1])\r\n    \r\n    \r\n    const markAsDone=async(rel)=>{\r\n        console.log(rel);\r\n        await API.post(\"/api/qapi/doneinfo/mark\",{\r\n    quuid:rel.id,\r\n    timestamp:(new Date()).getTime(),\r\n    displayednote:\"\",\r\n    note :\"\",\r\n    rate:50,\r\n    bankid:rel.bankid\r\n    \r\n        })\r\n    }\r\n    \r\n    const markAsDoneAll=async()=>{\r\n            Promise.all(Object.entries(Tlist.value).map(rr=>markAsDone(rr[1]))).then(v=>{\r\n                swal(\"ok.\")\r\n            })\r\n    }\r\n    \r\n    const GetDoneInfo=async(id)=>{\r\n        doneinfo.value[id]= await API.get(\"/api/qapi/doneinfo/getbyquuid/\"+id)\r\n    }\r\n    \r\n    \r\n    const displayADirectly=ref(false),XKWGetFile=ref({})\r\n    const handledisplayADirectlyCheckedChange=(checked)=>{\r\n        console.log(checked);\r\n    displayADirectly.value=checked\r\n    if(displayADirectly.value){\r\n        Object.entries(Tlist.value).forEach(v1 => {\r\n            console.log(v1);\r\n                API.get(\"/api/xkw-helper/get_more_detail/325/\"+v1[1].bankid+\"/\"+v1[1].qid).then(r=>{\r\n                    \r\n            XKWGetFile.value[v1[1].id]={\r\n                a:API.host+\"/api/xkw-helper/route-pic?purl=\"+btoa(r.data.answerImg.replace(\"@2\",\"@3\").replace(\"c2\",\"c1\")),\r\n                p:API.host+\"/api/xkw-helper/route-pic?purl=\"+btoa(r.data.parseImg.replace(\"@2\",\"@3\").replace(\"c2\",\"c1\")),\r\n            }\r\n    })\r\n        });\r\n    }\r\n    }\r\n\r\nconst orcres=ref({}),OCRResAccepted=ref({})\r\n    const OCRSingle=(oo,psm)=>{\r\n        API.post(\"/ocr-service\",{\r\n            url:XKWGetFile.value[oo.id].a,\r\n            psm,\r\n            lang:\"eng+chi_sim\"\r\n        }).then(v=>{\r\n            orcres.value[oo.id]=v.result\r\n        })\r\n    }\r\n    </script>\r\n    \r\n    <style>\r\n    @media print{\r\n        .noprint{\r\n            display: none;\r\n        }\r\n    \r\n    }\r\n    \r\n    /* .labi-container{\r\n        display: block;\r\n        height: fit-content;\r\n        width: 100%;\r\n        position: absolute;\r\n        z-index: -1;\r\n    }\r\n    .labi-block{\r\n        display: block;\r\n        width: 100%;\r\n        border-bottom-color: black;\r\n        border-bottom-width: 2px;\r\n        position:relative;\r\n        border-bottom-style: dotted;\r\n        text-align:right;\r\n    } */\r\n    \r\n    img{\r\n        max-width: 350px;\r\n    }\r\n    \r\n    td{\r\n        padding:0\r\n    }\r\n    </style>\r\n    "],"names":["route","useRoute","useRouter","ref","grouptitle","Tlist","API","sss","v","qtypes","res","rej","i","GetDoneInfo","doneinfo","chunk2array","mm","o","id","displayADirectly","XKWGetFile","handledisplayADirectlyCheckedChange","checked","v1","r","orcres","OCRResAccepted","OCRSingle","oo","psm"],"mappings":"yvDAiCS,MAACA,EAAMC,EAAU,EAAQC,EAAW,EAQ7BC,EAAI,CACZ,EAAE,GACF,EAAE,GACF,EAAE,EACV,CAAK,EAEmBA,EAAI,EAAK,EAC7B,MAAMC,EAAWD,EAAI,EAAE,EAEjBE,EAAMF,EAAI,EAAE,EAElBG,EAAI,KAAK,iBAAiB,CAAC,GAAGN,EAAM,OAAO,EAAE,CAAC,EAAE,KAAKO,GAAK,CAE1DA,EAAI,MAAM,MAAM,GAAG,EAAE,QAAQC,GAAK,CAC9BH,EAAM,MAAMG,CAAC,EAAEC,CACvB,CAAK,EAEUF,EAAI,MAAM,MAAM,GAAG,EAI9BH,EAAW,MAAMG,EAAI,MAErB,QAAQ,IAAIA,EAAI,MAAM,MAAM,GAAG,EAAE,IAAIC,GAAG,IAAI,QAAQ,CAACE,EAAIC,IAAM,CAC/DL,EAAI,IAAI,iBAAiBE,CAAC,EAAE,KAAKI,GAAG,CAChCP,EAAM,MAAMG,CAAC,EAAEI,CACvB,CAAK,EACDC,EAAYL,CAAC,CACjB,CAAK,CAAC,CAAC,EAAE,KAAK,IAAI,CAElB,CAAK,CAUL,CAAK,EAUD,MAAMM,EAASX,EAAI,EAAE,EAEpBY,EAAYC,GAAI,OAAO,QAAQA,CAAE,EAAE,IAAIC,GAAGA,EAAE,CAAC,CAAC,EAsBzCJ,EAAY,MAAMK,GAAK,CACzBJ,EAAS,MAAMI,CAAE,EAAG,MAAMZ,EAAI,IAAI,iCAAiCY,CAAE,CACxE,EAGKC,EAAiBhB,EAAI,EAAK,EAAEiB,EAAWjB,EAAI,EAAE,EAC7CkB,EAAqCC,GAAU,CACjD,QAAQ,IAAIA,CAAO,EACvBH,EAAiB,MAAMG,EACpBH,EAAiB,OAChB,OAAO,QAAQd,EAAM,KAAK,EAAE,QAAQkB,GAAM,CACtC,QAAQ,IAAIA,CAAE,EACVjB,EAAI,IAAI,uCAAuCiB,EAAG,CAAC,EAAE,OAAO,IAAIA,EAAG,CAAC,EAAE,GAAG,EAAE,KAAKC,GAAG,CAEvFJ,EAAW,MAAMG,EAAG,CAAC,EAAE,EAAE,EAAE,CACvB,EAAEjB,EAAI,KAAK,kCAAkC,KAAKkB,EAAE,KAAK,UAAU,QAAQ,KAAK,IAAI,EAAE,QAAQ,KAAK,IAAI,CAAC,EACxG,EAAElB,EAAI,KAAK,kCAAkC,KAAKkB,EAAE,KAAK,SAAS,QAAQ,KAAK,IAAI,EAAE,QAAQ,KAAK,IAAI,CAAC,CAC1G,CACb,CAAK,CACL,CAAS,CAEJ,EAECC,EAAOtB,EAAI,CAAE,CAAA,EAAEuB,EAAevB,EAAI,CAAA,CAAE,EAChCwB,EAAU,CAACC,EAAGC,IAAM,CACtBvB,EAAI,KAAK,eAAe,CACpB,IAAIc,EAAW,MAAMQ,EAAG,EAAE,EAAE,EAC5B,IAAAC,EACA,KAAK,aACjB,CAAS,EAAE,KAAKrB,GAAG,CACPiB,EAAO,MAAMG,EAAG,EAAE,EAAEpB,EAAE,MAClC,CAAS,CACJ"}